[tox]
min_version = 4.25
requires = tox-uv>=1

env_list =
    py3.9-numpy_1.23-vtk_9.0.3
    py3.9-numpy_1.26-vtk_9.1
    py3.10-numpy_latest-vtk_9.2.2
    py3.11-numpy_latest-vtk_9.2.6
    py3.12-numpy_latest-vtk_9.3.1
    py3.13-numpy_latest-vtk_9.4.2
    py3.13-numpy_nightly-vtk_latest
    py3.{9-13}

[testenv]
description = Run the tests with pytest with {basepython}
package = wheel
wheel_build_env = .pkg

passenv =
    PYVISTA*
    TRAME*
    JUPYTER*
    PLOT_SKIP*
    CI_WINDOWS
    DISPLAY
    XAUTHORITY
    ALLOW_PLOTTING
    PYTEST_ADDOPTS
    GITHUB_ACTIONS
    *SSL*
    COVERAGE*
    CI*

deps =
    .[test]
    numpy_1.23: numpy ~= 1.23.0
    numpy_1.26: numpy ~= 1.26.0
    vtk_9.0.3: vtk == 9.0.3
    vtk_9.1: vtk == 9.1.0
    vtk_9.2.2: vtk == 9.2.2
    vtk_9.2.6: vtk == 9.2.6
    vtk_9.3.1: vtk == 9.3.1
    vtk_9.4.2: vtk == 9.4.2
    vtk_9.0.3,vtk_9.1: matplotlib < 3.6


commands_pre=
    {[testenv]software_report_cmdline}
    numpy_nightly: uv pip uninstall numpy matplotlib
    numpy_nightly: uv pip install --pre --no-deps -i https://pypi.anaconda.org/scientific-python-nightly-wheels/simple matplotlib numpy

commands =
    {[testenv]all_testing_cmdline}

cov_flags =
    --cov \
    {env_site_packages_dir}{/}pyvista \
    --cov-config \
    {tox_root}{/}pyproject.toml \
    --no-cov-on-fail \
    --cov-context \
    test \
    --cov-report \
    term:skip-covered \
    --cov-report \
    xml
    --cov-report \
    html:{tox_root}{/}htmlcov_{env_name}

image_flags = --fail_extra_image_cache --generated_image_dir debug_images

all_testing_cmdline= pytest {tty:--color=yes} -v {[testenv]image_flags} {[testenv]cov_flags} {posargs}

software_report_cmdline=
    python -c "import pyvista;print(pyvista.Report(gpu=False));from pyvista import examples;print('User data path:', examples.USER_DATA_PATH)"

[testenv:integration-{trame,geovista}]
description = Run the integration tests
basepython =
    geovista: py3.12
    trame: py3.13
deps =
    {[testenv]deps}

setenv =
    GEOVISTA_HOME = {temp_dir}{/}geovista
    XDG_CACHE_HOME = {temp_dir}{/}.cache # for geovista pooch downloads
    XDG_DATA_HOME = {temp_dir}{/}.data # for cartopy url downloads
    GEOVISTA_POOCH_MUTE = true

allowlist_externals = git
change_dir =
    trame: examples_trame
    geovista: .
commands_pre =
    trame: uv pip install -r requirements.txt
    geovista: git clone https://github.com/bjlittle/geovista.git {env:GEOVISTA_HOME} --single-branch
    geovista: uv pip install -e {env:GEOVISTA_HOME}[test,exam,cmap]
    geovista: python -m cartopy.feature.download physical --output {env:XDG_DATA_HOME}{/}cartopy --no-warn
    geovista: geovista download --all --decompress

commands =
    trame: pytest {tty:--color=yes} tests {posargs}
    geovista: pytest {tty:--color=yes} {env:GEOVISTA_HOME}{/}tests --rootdir={env:GEOVISTA_HOME} --image_cache_dir={env:GEOVISTA_HOME}{/}tests{/}plotting{/}image_cache {posargs}
commands_post =
    geovista: python -c "import shutil,os,stat;shutil.rmtree(os.environ['GEOVISTA_HOME'], onerror=lambda func, path, _: (os.chmod(path, stat.S_IWRITE), func(path)))"

[testenv:check_package]
description = Check the package with twine
deps = twine
skip_install = true
build_command = uv build --sdist --wheel --out-dir dist .
commands=
    {[testenv:check_package]build_command}
    twine check --strict dist/*
commands_pre = []
commands_post = []

[testenv:publish_package]
passenv = TWINE*
description = Publish the package with twine on PyPI
deps = twine
skip_install = true
commands=
    {[testenv:check_package]build_command}
    twine upload --skip-existing dist/pyvista*
commands_pre = []
commands_post = []
